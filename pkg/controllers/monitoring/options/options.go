package options

import (
	"time"

	"github.com/spf13/pflag"
)

const (
	DefaultWhizardImage                  = "thanosio/thanos:v0.28.0"
	DefaultEnvoyImage                    = "envoyproxy/envoy:v1.20.2"
	DefaultGatewayImage                  = "kubesphere/whizard-monitoring-gateway:latest"
	DefaultPrometheusConfigReloaderImage = "quay.io/prometheus-operator/prometheus-config-reloader:v0.55.1"
	DefaultBlockManagerImage             = "kubesphere/whizard-monitoring-block-manager:latest"
	DefaultIngesterCleanupImage          = "bash:5.1.16"

	DefaultService = "kubesphere-monitoring-system.central"

	DefaultIngesterRetentionPeriod = time.Hour * 3
	DefaultTenantsPerIngester      = 3
	DefaultTenantsPerCompactor     = 10

	DefaultRouterReplicationFactor uint64 = 1
	DefaultRulerShards             int32  = 1
	DefaultRulerEvaluationInterval        = time.Second * 30
	DefaultStoreMinReplicas        int32  = 2
	DefaultStoreMaxReplicas        int32  = 20

	DefaultServiceAccount = "whizard-controller-manager"
)

type Options struct {
	EnableKubeSphereAdapter  bool   `json:"enableKubeSphereAdapter,omitempty" yaml:"enableKubeSphereAdapter,omitempty" mapstructure:"enableKubeSphereAdapter"`
	KubeSphereAdapterService string `json:"kubeSphereAdapterService,omitempty" yaml:"kubeSphereAdapterService,omitempty" mapstructure:"kubeSphereAdapterService"`

	Compactor     *CompactorOptions     `json:"compactor,omitempty" yaml:"compactor,omitempty" mapstructure:"compactor"`
	Gateway       *GatewayOptions       `json:"gateway,omitempty" yaml:"gateway,omitempty" mapstructure:"gateway"`
	Ingester      *IngesterOptions      `json:"ingester,omitempty" yaml:"ingester,omitempty" mapstructure:"ingester"`
	Query         *QueryOptions         `json:"query,omitempty" yaml:"query,omitempty" mapstructure:"query"`
	QueryFrontend *QueryFrontendOptions `json:"queryFrontend,omitempty" yaml:"queryFrontend,omitempty" mapstructure:"queryFrontend"`
	Router        *RouterOptions        `json:"router,omitempty" yaml:"router,omitempty" mapstructure:"router"`
	Ruler         *RulerOptions         `json:"ruler,omitempty" yaml:"ruler,omitempty" mapstructure:"ruler"`
	Store         *StoreOptions         `json:"store,omitempty" yaml:"store,omitempty" mapstructure:"store"`
	Storage       *StorageOptions       `json:"storage,omitempty" yaml:"storage,omitempty" mapstructure:"storage"`
}

func NewOptions() *Options {
	return &Options{

		EnableKubeSphereAdapter:  true,
		KubeSphereAdapterService: DefaultService,

		Compactor:     NewCompactorOptions(),
		Gateway:       NewGatewayOptions(),
		Ingester:      NewIngesterOptions(),
		Query:         NewQueryOptions(),
		QueryFrontend: NewQueryFrontendOptions(),
		Router:        NewRouterOptions(),
		Ruler:         NewRulerOptions(),
		Store:         NewStoreOptions(),
		Storage:       NewStorageOptions(),
	}
}

func (o *Options) Validate() []error {
	var errs []error

	errs = append(errs, o.Compactor.Validate()...)
	errs = append(errs, o.Gateway.Validate()...)
	errs = append(errs, o.Ingester.Validate()...)
	errs = append(errs, o.Query.Validate()...)
	errs = append(errs, o.QueryFrontend.Validate()...)
	errs = append(errs, o.Router.Validate()...)
	errs = append(errs, o.Ruler.Validate()...)
	errs = append(errs, o.Store.Validate()...)
	errs = append(errs, o.Storage.Validate()...)
	return errs
}

func (o *Options) ApplyTo(options *Options) {

	if o.KubeSphereAdapterService != "" {
		options.KubeSphereAdapterService = o.KubeSphereAdapterService
	}
	options.EnableKubeSphereAdapter = o.EnableKubeSphereAdapter

	o.Compactor.ApplyTo(options.Compactor)
	o.Gateway.ApplyTo(options.Gateway)
	o.Ingester.ApplyTo(options.Ingester)
	o.Query.ApplyTo(options.Query)
	o.QueryFrontend.ApplyTo(options.QueryFrontend)
	o.Router.ApplyTo(options.Router)
	o.Ruler.ApplyTo(options.Ruler)
	o.Store.ApplyTo(options.Store)
	o.Storage.ApplyTo(options.Storage)
}

func (o *Options) AddFlags(fs *pflag.FlagSet, c *Options) {
	fs.BoolVar(&o.EnableKubeSphereAdapter, "enableKubeSphereAdapter", c.EnableKubeSphereAdapter, "Enable KubeSphere adapter.")
	fs.StringVar(&o.KubeSphereAdapterService, "kubeSphereAdapterService", c.KubeSphereAdapterService, "Default service for tenants generated by kubesphere adapter, format is namespace.name")

	o.Compactor.AddFlags(fs, o.Compactor)
	o.Gateway.AddFlags(fs, o.Gateway)
	o.Ingester.AddFlags(fs, o.Ingester)
	o.Query.AddFlags(fs, o.Query)
	o.QueryFrontend.AddFlags(fs, o.QueryFrontend)
	o.Router.AddFlags(fs, o.Router)
	o.Ruler.AddFlags(fs, o.Ruler)
	o.Store.AddFlags(fs, c.Store)
	o.Storage.AddFlags(fs, c.Storage)
}
